{"version":3,"sources":["constants/api.ts","utils/formatWeatherReturn.ts","redux/slices/weathers/weatherActions.ts","constants/static.ts","utils/getPresentDateWeather.tsx","redux/slices/weathers/weatherSlice.ts","components/UI/styles.tsx","components/UI/CustomBtn.tsx","components/UI/RadioGroup.tsx","components/WeatherActions/styles.tsx","components/WeatherActions/index.tsx","components/Loader/styles.tsx","components/Loader/LoaderComponent.tsx","components/UI/NextBtn.tsx","components/UI/PrevBtn.tsx","components/Weather/styles.tsx","components/Weather/Card.tsx","components/UI/EmptyComponent.tsx","components/Weather/index.tsx","utils/useWindowSize.tsx","components/BarChart/index.tsx","utils/chartData.ts","pages/styles.tsx","pages/WeatherPage.tsx","utils/useLocation.ts","styles.tsx","App.tsx","reportWebVitals.ts","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["getApi","path","a","axios","get","response","data","formatWeatherReturn","weathers","units","map","weather","temperature","main","temp","dt_txt","time","split","dt","icon","description","getWeathers","createAsyncThunk","payload","newUnit","long","coord","lat","process","list","city","formatReturn","getDateWeatherForcast","date","now","_","filter","getJustDate","getPresentDayWeather","uniqBy","formatDate","moment","format","weatherSlice","createSlice","name","initialState","loading","weatherLength","error","barChartData","reducers","setWeatherToBarChartsData","state","extraReducers","builder","addCase","pending","fulfilled","action","length","rejected","actions","weatherSelector","Container","styled","div","InputGroup","PrevDiv","NextDiv","Button","CustomBtn","label","onClick","className","data-testid","RadioGroup","onChange","isCelciusChecked","isFahreheintChecked","type","id","value","checked","htmlFor","WeatherActions","refreshData","spin","keyframes","Loader","LoaderComponent","NextBtn","disabled","isMobile","PrevBtn","WeatherGrid","WeatherCard","TempName","WeatherForcast","TempDate","Card","imageSrc","WeatherIcon","useCallback","src","alt","EmptyComponent","WeatherComponent","dispatch","useDispatch","useState","size","setSize","updateSize","document","documentElement","clientWidth","window","innerHeight","useLayoutEffect","addEventListener","removeEventListener","useWindowSize","index","setIndex","count","disableNextBtn","disablePrevBtn","getTodayWeather","prev","slice","BarChart","charts","chart","returnChartDataAndLabel","labels","datasets","backgroundColor","borderColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","CityTag","WeatherPage","useSelector","setUnits","localLoading","setLocalLoading","result","setState","useEffect","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","useLocation","RenderBarChart","target","Weather","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a558901b.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const getApi = async (path: string) => {\n  try {\n    const response = await axios.get(path);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n","import { WeatherInterface } from \"typescript/weather.types\";\n\nexport const formatWeatherReturn = (\n  weathers: WeatherInterface[],\n  units: string\n) => {\n  return weathers?.map((weather: WeatherInterface) => ({\n    temperature: weather?.main?.temp,\n    dt_txt: weather?.dt_txt,\n    time: weather?.dt_txt.split(\" \")[1],\n    dt: weather?.dt,\n    icon: weather?.weather[0]?.icon,\n    description: weather?.weather[0]?.description,\n    main: weather?.weather[0]?.main,\n    units,\n  }));\n};\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport { getApi } from \"constants/api\";\nimport { DEFAULT_LAT, DEFAULT_LONG } from \"constants/static\";\nimport { WeatherActionPayload } from \"typescript/redux.types\";\nimport { formatWeatherReturn } from \"utils/formatWeatherReturn\";\n\nconst BASE_URL = process.env.REACT_APP_WEATHER_API;\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nexport const getWeathers = createAsyncThunk(\n  \"GET_WEATHERS\",\n  async (payload: WeatherActionPayload) => {\n    const newUnit = payload?.units ? payload.units : \"metric\";\n\n    const long = payload?.coord?.long ? payload?.coord?.long : DEFAULT_LONG;\n    const lat = payload?.coord?.lat ? payload?.coord?.lat : DEFAULT_LAT;\n\n    const { list, city } = await getApi(\n      `${BASE_URL}/forecast?APPID=${API_KEY}&cnt=40&units=${newUnit}&lon=${long}&lat=${lat}`\n    );\n    const formatReturn = formatWeatherReturn(list, newUnit);\n    const weathers = formatReturn;\n    return { weathers, city };\n  }\n);\n","export const NUMBER_TO_SHOW = 3;\n\nexport const DEFAULT_LONG = 11.576124;\nexport const DEFAULT_LAT = 48.137154;\n","import _ from \"lodash\";\nimport moment from \"moment\";\n\nimport { FormatedWeatherInterface } from \"typescript/weather.types\";\n\nexport const getDateWeatherForcast = (\n  weathers: FormatedWeatherInterface[],\n  date: string\n) => {\n  const now = date;\n  return _.filter(\n    weathers,\n    (weather: FormatedWeatherInterface) =>\n      getJustDate(weather?.dt_txt) === getJustDate(now)\n  );\n};\n\nexport const getPresentDayWeather = (weathers: FormatedWeatherInterface[]) => {\n  return _.uniqBy(\n    _.map(weathers, (weather: FormatedWeatherInterface) => ({\n      ...weather,\n      date: getJustDate(weather?.dt_txt),\n    })),\n    \"date\"\n  );\n};\n\nexport const formatDate = (date: string): string => {\n  const dateString = moment(date).format(\"D MMM YYYY\");\n  return dateString;\n};\n\nexport const getJustDate = (date: string): string => {\n  return date.split(\" \")[0];\n};\n\nexport const getDay = (date: string): string => {\n  const dateString = new Date(date).toDateString();\n  const day = dateString.split(\" \")[2];\n  return day;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"redux/reducers\";\nimport { InitialState } from \"typescript/redux.types\";\nimport { SlicePayloadInterface } from \"typescript/weather.types\";\nimport {\n  getPresentDayWeather,\n  getDateWeatherForcast,\n} from \"utils/getPresentDateWeather\";\nimport { getWeathers } from \"./weatherActions\";\n\nexport const initialState: InitialState = {\n  loading: false,\n  weathers: [],\n  weatherLength: 0,\n  error: null,\n  barChartData: [],\n  city: null,\n};\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherToBarChartsData: (\n      state: InitialState,\n      { payload: { weather, weathers } }: PayloadAction<SlicePayloadInterface>\n    ) => {\n      state.barChartData = getDateWeatherForcast(weathers, weather?.dt_txt);\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(getWeathers.pending, (state: InitialState) => {\n        state.loading = true;\n      })\n      .addCase(getWeathers.fulfilled, (state: InitialState, action) => {\n        const { weathers, city } = action.payload;\n        state.loading = false;\n        state.weathers = weathers;\n        state.city = city;\n        state.weatherLength = getPresentDayWeather(weathers).length;\n        state.barChartData = getDateWeatherForcast(\n          weathers,\n          weathers[0]?.dt_txt\n        );\n      })\n      .addCase(getWeathers.rejected, (state: InitialState) => {\n        state.loading = false;\n        state.error = \"something went wrong\";\n      });\n  },\n});\n\nexport default weatherSlice.reducer;\n\nexport const { setWeatherToBarChartsData } = weatherSlice.actions;\n\nexport const weatherSelector = (state: RootState) => state.weather;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n\n  label {\n    color: white;\n  }\n\n  @media (max-width: 768px) {\n    justify-content: space-between;\n  }\n`;\n\nexport const InputGroup = styled.div`\n  padding: 0 10px;\n  &.input_group {\n    margin-right: 15px;\n  }\n`;\n\nexport const PrevDiv = styled.div`\n  border-top: 2px solid #ffffff;\n  border-left: 2px solid #ffffff;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%) rotate(-45deg);\n  position: absolute;\n  left: -30px;\n  top: 50%;\n  cursor: pointer;\n\n  @media (max-width: 768px) {\n    left: 10px;\n    top: -50%;\n    z-index: 4;\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nexport const NextDiv = styled.div`\n  border-top: 2px solid #ffffff;\n  border-right: 2px solid #ffffff;\n  width: 20px;\n  height: 20px;\n  transform: translateY(-50%) rotate(45deg);\n  position: absolute;\n  right: -30px;\n  top: 50%;\n  cursor: pointer;\n\n  @media (max-width: 768px) {\n    right: 10px;\n    top: -50%;\n    z-index: 4;\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nexport const Button = styled.div`\n  background-color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 5px 15px;\n  cursor: pointer;\n\n  @media (max-width: 768px) {\n    margin-top: 20px;\n  }\n`;\n","import React from \"react\";\n\nimport { CustomBtnProps } from \"typescript/react-props.types\";\nimport { Button } from \"./styles\";\n\nconst CustomBtn: React.FC<CustomBtnProps> = ({ label, onClick, className }) => {\n  return (\n    <Button onClick={onClick} className={className} data-testid=\"refreshBtn\">\n      {label}\n    </Button>\n  );\n};\n\nexport default CustomBtn;\n","import React from \"react\";\n\nimport { RadioGroupProps } from \"typescript/react-props.types\";\nimport { Container, InputGroup } from \"./styles\";\n\nconst RadioGroup: React.FC<RadioGroupProps> = ({ onChange, units }) => {\n  const isCelciusChecked = units === \"metric\";\n  const isFahreheintChecked = units === \"imperial\";\n\n  return (\n    <Container>\n      <InputGroup className=\"input_group\">\n        <input\n          type=\"radio\"\n          name=\"degree\"\n          id=\"c\"\n          onChange={onChange}\n          value=\"metric\"\n          checked={isCelciusChecked}\n        />\n        <label htmlFor=\"c\">Celcius</label>\n      </InputGroup>\n      <InputGroup>\n        <input\n          type=\"radio\"\n          name=\"degree\"\n          id=\"f\"\n          onChange={onChange}\n          value=\"imperial\"\n          checked={isFahreheintChecked}\n        />\n        <label htmlFor=\"f\">Fahrenheit</label>\n      </InputGroup>\n    </Container>\n  );\n};\n\nexport default RadioGroup;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 5px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n\n    &.btn {\n      margin-top: 10px;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport CustomBtn from \"components/UI/CustomBtn\";\nimport RadioGroup from \"components/UI/RadioGroup\";\nimport { WeatherActionProps } from \"typescript/react-props.types\";\nimport { Container } from \"./styles\";\n\nconst WeatherActions: React.FC<WeatherActionProps> = ({\n  refreshData,\n  onChange,\n  units,\n}) => {\n  return (\n    <Container>\n      <div></div>\n      <RadioGroup onChange={onChange} units={units} />\n      <CustomBtn label=\"Refresh\" onClick={refreshData} className=\"btn\" />\n    </Container>\n  );\n};\n\nexport default WeatherActions;\n","import styled, { keyframes } from \"styled-components\";\n\nconst spin = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const Container = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.95);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  z-index: 2;\n\n  p {\n    font-style: italic;\n    font-size: 14px;\n    font-weight: bold;\n  }\n`;\n\nexport const Loader = styled.div`\n  border: 16px solid #e3e3e3;\n  border-top: 16px solid violet;\n  border-radius: 50%;\n  width: 100px;\n  height: 100px;\n  animation: ${spin} 1s linear infinite;\n`;\n","import React from \"react\";\n\nimport { Container, Loader } from \"./styles\";\n\nconst LoaderComponent = () => {\n  return (\n    <Container>\n      <Loader />\n      <p>Loading, Please wait...</p>\n    </Container>\n  );\n};\n\nexport default LoaderComponent;\n","import React from \"react\";\n\nimport { NextBtnProps } from \"typescript/react-props.types\";\nimport { NextDiv } from \"./styles\";\n\nconst NextBtn: React.FC<NextBtnProps> = ({ onClick, disabled, isMobile }) => (\n  <>{!disabled ? <NextDiv onClick={onClick} /> : null}</>\n);\n\nexport default NextBtn;\n","import React from \"react\";\n\nimport { PrevBtnProps } from \"typescript/react-props.types\";\nimport { PrevDiv } from \"./styles\";\n\nconst PrevBtn: React.FC<PrevBtnProps> = ({ onClick, disabled, isMobile }) => (\n  <>{!disabled ? <PrevDiv onClick={onClick} /> : null}</>\n);\n\nexport default PrevBtn;\n","import styled from \"styled-components\";\n\nexport const WeatherGrid = styled.div<{ isMobile: boolean }>`\n  display: grid;\n  grid-template-columns: ${({ isMobile }) =>\n    isMobile ? \"1fr\" : \"1fr 1fr 1fr\"};\n  gap: 5px;\n  justify-content: center;\n  position: relative;\n  margin-top: 30px;\n  margin-bottom: 40px;\n`;\n\nexport const WeatherCard = styled.div`\n  padding: 10px 20px;\n  margin: 0 5px;\n  background-color: violet;\n  color: white;\n  border-radius: 4px;\n  box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.15);\n  cursor: pointer;\n`;\n\nexport const TempName = styled.div`\n  text-align: center;\n  font-size: 18px;\n`;\n\nexport const WeatherForcast = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  p {\n    font-size: 13px;\n  }\n`;\n\nexport const TempDate = styled.div``;\n","import React, { useCallback } from \"react\";\n\nimport { CardProps } from \"typescript/react-props.types\";\nimport { formatDate } from \"utils/getPresentDateWeather\";\nimport { TempDate, TempName, WeatherCard, WeatherForcast } from \"./styles\";\n\nconst Card: React.FC<CardProps> = ({ weather, onClick }) => {\n  const imageSrc = `http://openweathermap.org/img/wn/${weather.icon}.png`;\n  formatDate(weather.dt_txt);\n  const WeatherIcon = useCallback(\n    () => (\n      <>\n        {weather.units === \"metric\" ? (\n          <span>&#8451;</span>\n        ) : (\n          <span>&#8457;</span>\n        )}\n      </>\n    ),\n    [weather]\n  );\n\n  return (\n    <WeatherCard onClick={() => onClick(weather)} data-testid=\"weatherCard\">\n      <TempName>Temperature</TempName>\n      <WeatherForcast>\n        <p>\n          {weather.temperature} <WeatherIcon />\n        </p>\n        <img src={imageSrc} alt=\"icon\" />\n      </WeatherForcast>\n      <TempDate>{formatDate(weather.dt_txt)}</TempDate>\n    </WeatherCard>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst EmptyComponent = () => {\n  return (\n    <Container data-testid=\"empty\">\n      <p>Sorry there is/are no weathers forcast</p>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  text-align: center;\n  width: 100%;\n\n  p {\n    text-align: center;\n    color: white;\n  }\n`;\n\nexport default EmptyComponent;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { NUMBER_TO_SHOW } from \"constants/static\";\nimport { setWeatherToBarChartsData } from \"redux/slices/weathers/weatherSlice\";\nimport { getPresentDayWeather } from \"utils/getPresentDateWeather\";\nimport LoaderComponent from \"components/Loader/LoaderComponent\";\nimport NextBtn from \"components/UI/NextBtn\";\nimport PrevBtn from \"components/UI/PrevBtn\";\nimport Card from \"./Card\";\nimport { useWindowSize } from \"utils/useWindowSize\";\nimport { FormatedWeatherInterface } from \"typescript/weather.types\";\nimport EmptyComponent from \"components/UI/EmptyComponent\";\nimport { WeatherComponentProps } from \"typescript/react-props.types\";\nimport { WeatherGrid } from \"./styles\";\n\nconst WeatherComponent: React.FC<WeatherComponentProps> = ({\n  weathers,\n  weatherLength,\n  loading,\n}) => {\n  const dispatch = useDispatch();\n\n  const [width] = useWindowSize();\n\n  const isMobile = width < 768;\n\n  const [index, setIndex] = useState(0);\n\n  const next = () => setIndex((prev: number) => (prev += 1));\n  const prev = () => setIndex((prev: number) => (prev -= 1));\n\n  const count = isMobile ? 1 : NUMBER_TO_SHOW;\n\n  const disableNextBtn =\n    weathers.length <= 0 || index + count === weatherLength;\n  const disablePrevBtn = !index;\n\n  const getTodayWeather = (payload: FormatedWeatherInterface) => {\n    dispatch(setWeatherToBarChartsData({ weather: payload, weathers }));\n  };\n\n  return (\n    <>\n      {loading && <LoaderComponent />}\n      <WeatherGrid isMobile={isMobile || weathers.length <= 0}>\n        <PrevBtn\n          onClick={prev}\n          disabled={disablePrevBtn}\n          isMobile={isMobile}\n          data-testid=\"prev\"\n        />\n        {weathers.length <= 0 ? (\n          <EmptyComponent />\n        ) : (\n          !loading &&\n          getPresentDayWeather(weathers)\n            ?.slice(index, index + count)\n            .map((weather: FormatedWeatherInterface) => (\n              <Card\n                weather={weather}\n                key={weather?.dt}\n                onClick={getTodayWeather}\n              />\n            ))\n        )}\n        <NextBtn\n          onClick={next}\n          disabled={disableNextBtn}\n          isMobile={isMobile}\n          data-testid=\"next\"\n        />\n      </WeatherGrid>\n    </>\n  );\n};\n\nexport default WeatherComponent;\n","import { useLayoutEffect, useState } from \"react\";\n\nexport const useWindowSize = (): number[] => {\n  const [size, setSize] = useState([0, 0]);\n\n  const updateSize = () => {\n    setSize([document.documentElement.clientWidth, window.innerHeight]);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, []);\n\n  return size;\n};\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\n\nimport { returnChartDataAndLabel } from \"utils/chartData\";\nimport { BarChartProps } from \"typescript/react-props.types\";\n\nconst BarChart: React.FC<BarChartProps> = ({ weathers, barChartData }) => {\n  const charts = returnChartDataAndLabel(barChartData);\n\n  const data = {\n    labels: weathers.length > 0 ? charts.label : [],\n    datasets: [\n      {\n        label: \"# of Votes\",\n        data: weathers.length > 0 ? charts.data : [],\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 159, 64, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options: any = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <Bar\n      data={data}\n      options={options}\n      data-testid={barChartData.length > 0 ? \"barchart\" : null}\n    />\n  );\n};\n\nexport default BarChart;\n","import _ from \"lodash\";\nimport { FormatedWeatherInterface } from \"typescript/weather.types\";\n\nexport const returnChartDataAndLabel = (\n  charts: FormatedWeatherInterface[]\n) => ({\n  data: _.map(charts, (chart) => chart.temperature),\n  label: _.map(charts, (chart) => chart.time),\n});\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 480px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    overflow-x: hidden;\n    padding: 0 10px;\n  }\n`;\n\nexport const CityTag = styled.div`\n  color: white;\n  text-align: center;\n`;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getWeathers } from \"redux/slices/weathers/weatherActions\";\nimport {\n  setWeatherToBarChartsData,\n  weatherSelector,\n} from \"redux/slices/weathers/weatherSlice\";\nimport WeatherActions from \"components/WeatherActions\";\nimport WeatherComponent from \"components/Weather\";\nimport BarChart from \"components/BarChart\";\nimport { Container, CityTag } from \"./styles\";\nimport { useLocation } from \"utils/useLocation\";\n\nconst WeatherPage = () => {\n  const dispatch = useDispatch();\n\n  const { weathers, weatherLength, loading, barChartData, city } =\n    useSelector(weatherSelector);\n\n  const [units, setUnits] = useState(\"metric\");\n  const [localLoading, setLocalLoading] = useState(true);\n\n  const result = useLocation();\n\n  useEffect(() => {\n    if (result[0] && result[1]) {\n      dispatch(getWeathers({ coord: { long: result[0], lat: result[1] } }));\n      dispatch(setWeatherToBarChartsData({ weather: weathers[0], weathers }));\n      setLocalLoading(false);\n    }\n\n    // eslint-disable-next-line\n  }, [result[0], result[1], localLoading]);\n\n  const refreshData = () => {\n    dispatch(\n      getWeathers({ units, coord: { long: result[0], lat: result[1] } })\n    );\n  };\n\n  const handleChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setUnits(value);\n    dispatch(\n      getWeathers({ units: value, coord: { long: result[0], lat: result[1] } })\n    );\n  };\n\n  const RenderBarChart = useCallback(\n    () => <BarChart weathers={weathers} barChartData={barChartData} />,\n    [barChartData, weathers]\n  );\n\n  return (\n    <Container>\n      <WeatherActions\n        refreshData={refreshData}\n        onChange={handleChange}\n        units={units}\n      />\n      <CityTag>{city?.name}</CityTag>\n      <WeatherComponent\n        weathers={weathers}\n        weatherLength={weatherLength}\n        loading={loading || localLoading}\n      />\n      <RenderBarChart />\n    </Container>\n  );\n};\n\nexport default WeatherPage;\n","import { useEffect, useState } from \"react\";\n\nexport const useLocation = () => {\n  const [state, setState] = useState<number[]>([]);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function (position) {\n      setState([position.coords.longitude, position.coords.latitude]);\n    });\n  }, []);\n\n  return state;\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: #1d3354;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React from \"react\";\n\nimport WeatherPage from \"pages/WeatherPage\";\nimport { Container } from \"styles\";\n\nfunction App() {\n  return (\n    <Container>\n      <WeatherPage />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport weatherSlice from \"./slices/weathers/weatherSlice\";\n\nconst rootReducer = combineReducers({\n  weather: weatherSlice,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport rootReducer, { RootState } from \"./reducers\";\n\nconst middleware = [...getDefaultMiddleware(), logger];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n});\n\nexport type StoreType = typeof store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch();\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action>;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}